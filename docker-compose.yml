services:
  web:
    container_name: '${PROJECT_NAME}_${ENV}_web'
    profiles:
      - production
    ports:
      - "8080:8080"
    build:
      context: .
      dockerfile: ./apps/web/Dockerfile
      args:
        - ENV=$ENV
    restart: always
    depends_on:
      - api-producer
      - worker-consumer
    networks:
      - public
  api-producer:
    container_name: '${PROJECT_NAME}_${ENV}_api-producer'
    profiles:
      - production
    build:
      context: .
      dockerfile: ./apps/api-producer/Dockerfile
      args:
        - ENV=$ENV
    restart: always
    networks:
      - private
      - public
  worker-consumer:
    container_name: '${PROJECT_NAME}_${ENV}_worker-consumer'
    profiles:
      - production
    build:
      context: .
      dockerfile: ./apps/worker-consumer/Dockerfile
      args:
        - ENV=$ENV
    restart: always
    depends_on:
      - api-producer
    networks:
      - private
  rabbitmq:
    image: rabbitmq:3-management
    profiles:
      - local
    restart: always
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-rabbitmq_user}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS:-rabbitmq_pass}
    volumes:
      - .rabbitmq_data:/var/lib/rabbitmq:rw
      - .rabbitmq_config:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - private
  redis:
    image: redis:7.0-rc-alpine
    profiles:
      - local
    restart: always
    ports:
      - 6379:6379
    volumes:
      - .redis_data:/data:rw
    networks:
      - private
volumes:
  redis_data:
  rabbitmq_data:
  rabbitmq_config:
networks:
  public:
  private: