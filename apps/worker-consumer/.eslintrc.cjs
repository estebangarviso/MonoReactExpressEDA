/*
ðŸ‘‹ Hi! This file was autogenerated by tslint-to-eslint-config.
https://github.com/typescript-eslint/tslint-to-eslint-config

It represents the closest reasonable ESLint configuration to this
project's original TSLint configuration.

We recommend eventually switching this configuration to extend from
the recommended rulesets in typescript-eslint.
https://github.com/typescript-eslint/tslint-to-eslint-config/blob/master/docs/FAQs.md

Happy linting! ðŸ’–
*/

module.exports = {
  root: true,
  env: {
    es6: true,
    jest: true,
    node: true,
    worker: true,
    es2021: true,
    'jest/globals': true
  },
  parser: '@babel/eslint-parser',
  parserOptions: {
    requireConfigFile: false,
    sourceType: 'module',
    ecmaVersion: 12,
    ecmaFeatures: {
      modules: true
    },
    babelOptions: {
      babelrc: false,
      configFile: false,
      presets: ['@babel/preset-env']
    }
  },
  plugins: [
    '@babel',
    '@babel/plugin-syntax-import-assertions',
    'prettier',
    'promise',
    'jest',
    'jest-formatting',
    'prefer-arrow',
    'jsdoc',
    'import'
  ],
  extends: [
    'plugin:prettier/recommended',
    'plugin:eslint-comments/recommended'
  ],
  rules: {
    '@babel/new-cap': 'error',
    '@babel/no-invalid-this': 'error',
    '@babel/no-undef': 'error',
    '@babel/no-unused-expressions': 'error',
    '@babel/object-curly-spacing': ['error', 'always'],
    '@babel/semi': 'off',

    'arrow-parens': ['error', 'as-needed'],
    'import/no-extraneous-dependencies': [
      'error',
      {
        devDependencies: true
      }
    ],
    'newline-before-return': 'error',
    'object-curly-spacing': ['error', 'always'],
    complexity: 'off',
    'constructor-super': 'error',
    curly: ['error', 'multi'],
    'dot-notation': 'off',
    eqeqeq: ['error', 'smart'],
    'guard-for-in': 'error',
    'id-denylist': [
      'error',
      'any',
      'Number',
      'number',
      'String',
      'string',
      'Boolean',
      'boolean',
      'Undefined',
      'undefined'
    ],
    'id-match': 'error',
    'import/order': 'off',
    'jsdoc/check-alignment': 'error',
    'jsdoc/check-indentation': 'off',
    'jsdoc/newline-after-description': 'off',
    'max-classes-per-file': ['error', 1],
    'max-len': [
      'error',
      {
        code: 80,
        ignoreComments: true,
        ignoreRegExpLiterals: true,
        ignoreTemplateLiterals: true,
        ignoreTrailingComments: true,
        ignoreStrings: true,
        ignoreUrls: true
      }
    ],
    'new-parens': 'error',
    'no-bitwise': 'error',
    'no-caller': 'error',
    'no-cond-assign': 'error',
    'no-console': 'off',
    'no-debugger': 'error',
    'no-empty': 'error',
    'no-empty-function': 'off',
    'no-eval': 'error',
    'no-fallthrough': 'off',
    'no-invalid-this': 'off',
    'no-multiple-empty-lines': 'off',
    'no-new-wrappers': 'error',
    'no-shadow': 'off',
    'no-throw-literal': 'error',
    'no-trailing-spaces': 'error',
    'no-undef-init': 'error',
    'no-underscore-dangle': 'off',
    'no-unsafe-finally': 'error',
    'no-unused-expressions': 'off',
    'no-unused-labels': 'error',
    'no-use-before-define': 'off',
    'no-var': 'error',
    'object-shorthand': ['error', 'always'],
    'one-var': ['error', 'never'],
    'prefer-arrow/prefer-arrow-functions': [
      'warn',
      {
        disallowPrototype: true,
        singleReturnOnly: false,
        classPropertiesAllowed: false
      }
    ],
    'prefer-const': 'error',
    'prettier/prettier': [
      'error',
      {
        arrowParens: 'avoid',
        bracketSpacing: true,
        printWidth: 80,
        quoteProps: 'as-needed',
        semi: false,
        singleQuote: true,
        tabWidth: 2,
        trailingComma: 'none'
      }
    ],
    'quote-props': ['error', 'as-needed'],
    quotes: 'off',
    radix: ['error', 'as-needed'],
    'spaced-comment': ['error', 'always'],
    'use-isnan': 'error',
    'valid-typeof': 'off'
  }
}
